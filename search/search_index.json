{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>named</code>","text":"<p>Named types.</p>"},{"location":"#installing","title":"Installing","text":"<p>Python 3.8 or above is required.</p>"},{"location":"#pip","title":"pip","text":"<p>Installing the library with <code>pip</code> is quite simple:</p> <pre><code>$ pip install named\n</code></pre> <p>Alternatively, the library can be installed from source:</p> <pre><code>$ git clone https://github.com/nekitdev/named.git\n$ cd named\n$ python -m pip install .\n</code></pre>"},{"location":"#poetry","title":"poetry","text":"<p>You can add <code>named</code> as a dependency with the following command:</p> <pre><code>$ poetry add named\n</code></pre> <p>Or by directly specifying it in the configuration like so:</p> <pre><code>[tool.poetry.dependencies]\nnamed = \"^1.4.2\"\n</code></pre> <p>Alternatively, you can add it directly from the source:</p> <pre><code>[tool.poetry.dependencies.named]\ngit = \"https://github.com/nekitdev/named.git\"\n</code></pre>"},{"location":"#example","title":"Example","text":"<pre><code>&gt;&gt;&gt; from named import get_name, get_type_name, is_named\n&gt;&gt;&gt; print(is_named(int))\nTrue\n&gt;&gt;&gt; print(get_name(int))\nint\n&gt;&gt;&gt; print(is_named(42))\nFalse\n&gt;&gt;&gt; print(get_type_name(42))\nint\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>You can find the documentation here.</p>"},{"location":"#support","title":"Support","text":"<p>If you need support with the library, you can send an email or refer to the official Discord server.</p>"},{"location":"#changelog","title":"Changelog","text":"<p>You can find the changelog here.</p>"},{"location":"#security-policy","title":"Security Policy","text":"<p>You can find the Security Policy of <code>named</code> here.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you are interested in contributing to <code>named</code>, make sure to take a look at the Contributing Guide, as well as the Code of Conduct.</p>"},{"location":"#license","title":"License","text":"<p><code>named</code> is licensed under the MIT License terms. See License for details.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#142-2024-03-15","title":"1.4.2 (2024-03-15)","text":""},{"location":"changelog/#changes","title":"Changes","text":"<ul> <li><code>TypeIs</code> is now used instead of <code>TypeGuard</code> for more precise type narrowing.</li> </ul>"},{"location":"changelog/#141-2024-02-26","title":"1.4.1 (2024-02-26)","text":"<p>No significant changes.</p>"},{"location":"changelog/#140-2024-02-25","title":"1.4.0 (2024-02-25)","text":""},{"location":"changelog/#internal","title":"Internal","text":"<ul> <li>Dropped Python 3.7 support.</li> </ul>"},{"location":"changelog/#130-2023-05-29","title":"1.3.0 (2023-05-29)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Added <code>set_name</code>, <code>set_type_name</code>, <code>set_module</code> and <code>set_type_module</code>.</li> </ul>"},{"location":"changelog/#internal_1","title":"Internal","text":"<ul> <li>Renamed <code>named.typing</code> to <code>named.core</code>.</li> </ul>"},{"location":"changelog/#120-2023-05-24","title":"1.2.0 (2023-05-24)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Implemented utilities for accessing modules akin to fetching names.</li> </ul>"},{"location":"changelog/#110-2022-11-07","title":"1.1.0 (2022-11-07)","text":"<p>No significant changes.</p>"},{"location":"changelog/#101-2022-10-30","title":"1.0.1 (2022-10-30)","text":"<p>No significant changes.</p>"},{"location":"changelog/#100-2022-10-30","title":"1.0.0 (2022-10-30)","text":"<p>Initial release.</p>"},{"location":"code_of_conduct/","title":"Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement to conduct@nekit.dev.</p> <p>All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://contributor-covenant.org/version/2/1/code_of_conduct.</p> <p>Community Impact Guidelines were inspired by Mozilla's Code of Conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://contributor-covenant.org/faq. Translations are available at https://contributor-covenant.org/translations.</p>"},{"location":"reference/","title":"Reference","text":"<p>Named types.</p> <p>This library defines the <code>Named</code> protocol for types that contain the <code>__name__</code> attribute, abstracting the attribute itself away.</p> <p>It also provides the <code>get_name</code> function to fetch the name of the item provided, along with <code>get_type_name</code>, such that</p> <pre><code>get_type_item(item)\n# is equivalent to\nget_name(type(item))\n</code></pre> <p>Lastly, there is the type guard function called <code>is_named</code> (aliased as <code>has_name</code>), which checks for the presence of <code>__name__</code> attribute (which is exported in the <code>NAME</code> constant).</p> <p>This library also provides the functionality for accessing and manipulating module names:</p> <code>__name__</code> <code>__module__</code> <code>Named</code> <code>Moduled</code> <code>get_name</code> <code>get_module</code> <code>get_type_name</code> <code>get_type_module</code> <code>is_named</code> <code>is_moduled</code> <code>has_name</code> <code>has_module</code> <code>NAME</code> <code>MODULE</code>"},{"location":"reference/#named.MODULE","title":"<code>MODULE = '__module__'</code>  <code>module-attribute</code>","text":"<p>The literal <code>__module__</code> string.</p>"},{"location":"reference/#named.NAME","title":"<code>NAME = '__name__'</code>  <code>module-attribute</code>","text":"<p>The literal <code>__name__</code> string.</p>"},{"location":"reference/#named.has_module","title":"<code>has_module = is_moduled</code>  <code>module-attribute</code>","text":"<p>An alias of <code>is_moduled</code>.</p>"},{"location":"reference/#named.has_name","title":"<code>has_name = is_named</code>  <code>module-attribute</code>","text":"<p>An alias of <code>is_named</code>.</p>"},{"location":"reference/#named.Moduled","title":"<code>Moduled</code>","text":"<p>             Bases: <code>Protocol</code></p> <p>The moduled protocol for types that contain the <code>__module__</code> attribute.</p> Source code in <code>named/core.py</code> <pre><code>@runtime_checkable\nclass Moduled(Protocol):\n    \"\"\"The moduled protocol for types that contain the `__module__` attribute.\"\"\"\n\n    __module__: str\n</code></pre>"},{"location":"reference/#named.Named","title":"<code>Named</code>","text":"<p>             Bases: <code>Protocol</code></p> <p>The named protocol for types that contain the <code>__name__</code> attribute.</p> Source code in <code>named/core.py</code> <pre><code>@runtime_checkable\nclass Named(Protocol):\n    \"\"\"The named protocol for types that contain the `__name__` attribute.\"\"\"\n\n    __name__: str\n</code></pre>"},{"location":"reference/#named.get_module","title":"<code>get_module(item: Moduled) -&gt; str</code>","text":"<p>Fetches the <code>__module__</code> of the <code>Moduled</code> <code>item</code>.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Moduled</code> <p>The item to fetch the module of.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The module of the item.</p> Source code in <code>named/core.py</code> <pre><code>def get_module(item: Moduled) -&gt; str:\n    \"\"\"Fetches the `__module__` of the [`Moduled`][named.core.Moduled] `item`.\n\n    Arguments:\n        item: The item to fetch the module of.\n\n    Returns:\n        The module of the item.\n    \"\"\"\n    return item.__module__\n</code></pre>"},{"location":"reference/#named.get_name","title":"<code>get_name(item: Named) -&gt; str</code>","text":"<p>Fetches the <code>__name__</code> of the <code>Named</code> <code>item</code>.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Named</code> <p>The item to fetch the name of.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The name of the item.</p> Source code in <code>named/core.py</code> <pre><code>def get_name(item: Named) -&gt; str:\n    \"\"\"Fetches the `__name__` of the [`Named`][named.core.Named] `item`.\n\n    Arguments:\n        item: The item to fetch the name of.\n\n    Returns:\n        The name of the item.\n    \"\"\"\n    return item.__name__\n</code></pre>"},{"location":"reference/#named.get_type_module","title":"<code>get_type_module(item: Any) -&gt; str</code>","text":"<p>Fetches the <code>__module__</code> of the <code>item</code> type.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to fetch the type module of.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The module of the item type.</p> Source code in <code>named/core.py</code> <pre><code>def get_type_module(item: Any) -&gt; str:\n    \"\"\"Fetches the `__module__` of the `item` type.\n\n    Arguments:\n        item: The item to fetch the type module of.\n\n    Returns:\n        The module of the item type.\n    \"\"\"\n    return get_module(type(item))  # type: ignore\n</code></pre>"},{"location":"reference/#named.get_type_name","title":"<code>get_type_name(item: Any) -&gt; str</code>","text":"<p>Fetches the <code>__name__</code> of the <code>item</code> type.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to fetch the type name of.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The name of the item type.</p> Source code in <code>named/core.py</code> <pre><code>def get_type_name(item: Any) -&gt; str:\n    \"\"\"Fetches the `__name__` of the `item` type.\n\n    Arguments:\n        item: The item to fetch the type name of.\n\n    Returns:\n        The name of the item type.\n    \"\"\"\n    return get_name(type(item))  # type: ignore\n</code></pre>"},{"location":"reference/#named.is_moduled","title":"<code>is_moduled(item: Any) -&gt; TypeIs[Moduled]</code>","text":"<p>Checks if the <code>item</code> implements the <code>Moduled</code> protocol.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to check.</p> required <p>Returns:</p> Type Description <code>TypeIs[Moduled]</code> <p>Whether the item implements the <code>Moduled</code> protocol.</p> Source code in <code>named/core.py</code> <pre><code>def is_moduled(item: Any) -&gt; TypeIs[Moduled]:\n    \"\"\"Checks if the `item` implements the [`Moduled`][named.core.Moduled] protocol.\n\n    Arguments:\n        item: The item to check.\n\n    Returns:\n        Whether the item implements the [`Moduled`][named.core.Moduled] protocol.\n    \"\"\"\n    return has_attribute(item, MODULE)\n</code></pre>"},{"location":"reference/#named.is_named","title":"<code>is_named(item: Any) -&gt; TypeIs[Named]</code>","text":"<p>Checks if the <code>item</code> implements the <code>Named</code> protocol.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to check.</p> required <p>Returns:</p> Type Description <code>TypeIs[Named]</code> <p>Whether the item implements the <code>Named</code> protocol.</p> Source code in <code>named/core.py</code> <pre><code>def is_named(item: Any) -&gt; TypeIs[Named]:\n    \"\"\"Checks if the `item` implements the [`Named`][named.core.Named] protocol.\n\n    Arguments:\n        item: The item to check.\n\n    Returns:\n        Whether the item implements the [`Named`][named.core.Named] protocol.\n    \"\"\"\n    return has_attribute(item, NAME)\n</code></pre>"},{"location":"reference/#named.set_module","title":"<code>set_module(item: Moduled, module: str) -&gt; None</code>","text":"<p>Sets the <code>__module__</code> of the <code>Moduled</code> <code>item</code>.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Moduled</code> <p>The item to set the module of.</p> required <code>module</code> <code>str</code> <p>The module to set on the item.</p> required Source code in <code>named/core.py</code> <pre><code>def set_module(item: Moduled, module: str) -&gt; None:\n    \"\"\"Sets the `__module__` of the [`Moduled`][named.core.Moduled] `item`.\n\n    Arguments:\n        item: The item to set the module of.\n        module: The module to set on the item.\n    \"\"\"\n    item.__module__ = module\n</code></pre>"},{"location":"reference/#named.set_name","title":"<code>set_name(item: Named, name: str) -&gt; None</code>","text":"<p>Sets the <code>__name__</code> of the <code>Named</code> <code>item</code>.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Named</code> <p>The item to set the name of.</p> required <code>name</code> <code>str</code> <p>The name to set on the item.</p> required Source code in <code>named/core.py</code> <pre><code>def set_name(item: Named, name: str) -&gt; None:\n    \"\"\"Sets the `__name__` of the [`Named`][named.core.Named] `item`.\n\n    Arguments:\n        item: The item to set the name of.\n        name: The name to set on the item.\n    \"\"\"\n    item.__name__ = name\n</code></pre>"},{"location":"reference/#named.set_type_module","title":"<code>set_type_module(item: Any, module: str) -&gt; None</code>","text":"<p>Sets the <code>__module__</code> of the <code>item</code> type.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to set the type module of.</p> required <code>module</code> <code>str</code> <p>The module to set on the item type.</p> required Source code in <code>named/core.py</code> <pre><code>def set_type_module(item: Any, module: str) -&gt; None:\n    \"\"\"Sets the `__module__` of the `item` type.\n\n    Arguments:\n        item: The item to set the type module of.\n        module: The module to set on the item type.\n    \"\"\"\n    set_module(type(item), module)  # type: ignore\n</code></pre>"},{"location":"reference/#named.set_type_name","title":"<code>set_type_name(item: Any, name: str) -&gt; None</code>","text":"<p>Sets the <code>__name__</code> of the <code>item</code> type.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to set the type name of.</p> required <code>name</code> <code>str</code> <p>The name to set on the item type.</p> required Source code in <code>named/core.py</code> <pre><code>def set_type_name(item: Any, name: str) -&gt; None:\n    \"\"\"Sets the `__name__` of the `item` type.\n\n    Arguments:\n        item: The item to set the type name of.\n        name: The name to set on the item type.\n    \"\"\"\n    set_name(type(item), name)  # type: ignore\n</code></pre>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#reporting","title":"Reporting","text":"<p>Thank you for taking the time to responsibly disclose any problems you find.</p> <p>Do not file public issues as they are open for everyone to see!</p> <p>All security vulnerabilities in <code>named</code> should be reported by email to security@nekit.dev. Your report will be acknowledged within 24 hours, and you will receive a more detailed response within 48 hours indicating the next steps in handling your report.</p> <p>You can encrypt your report using our public key: <code>6AF9DDF87B37BBE6E83F5DF2B8F5B86F98F12F5E</code>. This key is also available on MIT's Key Server and reproduced below.</p> <p>After the initial reply to your report, the core team will try to keep you informed of the progress being made towards a fix and official announcement. These updates will be sent at least every five days. In reality, this is more likely to be every 24-48 hours.</p>"},{"location":"security/#disclosure-policy","title":"Disclosure Policy","text":"<p><code>named</code> has a 5-step disclosure process:</p> <ol> <li> <p>The security report is received and is assigned a primary handler.    This person will coordinate the fix and release process.</p> </li> <li> <p>The problem is confirmed and a list of all affected versions is determined.</p> </li> <li> <p>Code is audited to find any potential similar problems.</p> </li> <li> <p>Fixes are prepared for all releases which are still under maintenance.    These fixes are not committed to the public repository but rather    held locally pending the announcement.</p> </li> <li> <p>On the embargo date, the changes are pushed to the public repository    and new builds are deployed.</p> </li> </ol> <p>This process can take some time, especially when coordination is required with maintainers of other projects. Every effort will be made to handle the issue in as timely a manner as possible, however it is important that we follow the release process above to ensure that the disclosure is handled in a consistent manner.</p>"},{"location":"security/#security-key","title":"Security Key","text":"<pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\n\n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\npbmAGLbBB2TBok4=\n=Ir8m\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre>"},{"location":"security/#attribution","title":"Attribution","text":"<p>This Security Policy is adapted from Rust's Security Policy.</p>"}]}